<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on main1o</title>
    <link>https://main1o.github.io/tags/java/</link>
    <description>Recent content in Java on main1o</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Jul 2023 00:23:51 +0800</lastBuildDate><atom:link href="https://main1o.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CC5</title>
      <link>https://main1o.github.io/post/cc5/</link>
      <pubDate>Sun, 30 Jul 2023 00:23:51 +0800</pubDate>
      
      <guid>https://main1o.github.io/post/cc5/</guid>
      <description>CC5链 漏洞位于org.apache.commons.collections.functors.InvokerTransformer 方法transform 测试版本为3.1
这里明显的java反射，拿到input对象的类，在通过获取方法iMethodName() 并且传入参数iArgs
Class cls = input.getClass(); Method method = cls.getMethod(this.iMethodName, this.iParamTypes); return method.invoke(input, this.iArgs); 通俗点讲就是：
... input.iMethodName(iArgs); // input为传入的对象 其他的参数this.iMethodName this.iParamTypes this.iArgs 在构造函数可控
正常流程的代码执行，并且国际惯例调用计算器
import org.apache.commons.collections.functors.InvokerTransformer; public class CC5_demo { public static void main(String[] args) { InvokerTransformer invokerTransformer; invokerTransformer = new InvokerTransformer(&amp;#34;exec&amp;#34;,new Class[]{String.class},new Object[]{&amp;#34;calc&amp;#34;}); invokerTransformer.transform(Runtime.getRuntime()); } } InvokerTransformer()为重载构造方法。这里传入的三个值说明:
方法名，类型String 方法参数类型，类型Class数组 执行的命令 参数对象 为什么要getRuntime()? 因为Runtime类的设计采用的是单例设计模式 所以想得到当前运行的Runtime对象,需要通过 getRuntime 方法获取
扩展 在反序列化中 会自动执行readObject()方法，构建InvokerTransformer对象还需要解决
invokerTransformer.transform() 怎么去执行 ? Runtime.getRuntime() 呢？ 在org.apache.commons.collections.functors.ChainedTransformer 中 方法transform 有链式调用</description>
    </item>
    
  </channel>
</rss>
