<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on main1o</title>
    <link>https://main1o.github.io/tags/python/</link>
    <description>Recent content in python on main1o</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://main1o.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pyenv</title>
      <link>https://main1o.github.io/post/pyenv/</link>
      <pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://main1o.github.io/post/pyenv/</guid>
      <description>Pyenv Python3 和 Python2 之间的差距 ， 以及Python3.10 的改动 Pyenv能方便的管理这些不同版本处于同一个系统。并且能全局切换不同的Python解释器以及Pip 操作简单，方便上手 一、安装 我是 Arch Linux ，直接 yay -S pyenv 或者pacman即可
官方脚本安装
curl https://pyenv.run | bash # or curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash 二、配置 bash
echo &amp;#39;export PYENV_ROOT=&amp;#34;$HOME/.pyenv&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile echo &amp;#39;export PATH=&amp;#34;$PYENV_ROOT/bin:$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile echo -e &amp;#39;if command -v pyenv 1&amp;gt;/dev/null 2&amp;gt;&amp;amp;1; then\n eval &amp;#34;$(pyenv init -)&amp;#34;\nfi&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile # 初始化 Zsh
echo &amp;#39;export PYENV_ROOT=&amp;#34;$HOME/.pyenv&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.zshrc echo &amp;#39;export PATH=&amp;#34;$PYENV_ROOT/bin:$PATH&amp;#34;&amp;#39; &amp;gt;&amp;gt; ~/.</description>
    </item>
    
    <item>
      <title>sqlmap_tamper</title>
      <link>https://main1o.github.io/post/sqlmap_tamper/</link>
      <pubDate>Wed, 18 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://main1o.github.io/post/sqlmap_tamper/</guid>
      <description>sqlmap_tamper &amp;ndash;tamper [插件名]
sqlmap/tamper 插件目录
sqlmap脚本模块的用法
CONCAT_WS 和concat()一样,将多个字符串连接成一个字符串
JSON_ARRAYAGG() 函数将指定的列或者表达式的值聚合为一个 JSON 数组
mysql&amp;gt; select JSON_ARRAYAGG(name) from user; +------------------------------------------------------------+ | JSON_ARRAYAGG(name) | +------------------------------------------------------------+ | [&amp;#34;main1o&amp;#34;, &amp;#34;main1o&amp;#34;, &amp;#34;main1o&amp;#34;, &amp;#34;main1o&amp;#34;, &amp;#34;main1o&amp;#34;, &amp;#34;demo&amp;#34;] | +------------------------------------------------------------+ sqlmap\tamper 有非常灵活且自定义高的插件 Demo:
from lib.core.enums import PRIORITY from lib.core.common import singleTimeWarnMessage from lib.core.enums import DBMS __priority__ = PRIORITY.LOW def dependencies(): pass def tamper(payload, **kwargs): return payload 插件结构分为3部分:
PRIORITY 定义tamper的优先级 ，对应的数字越高优先级也就越大
__priority__ = PRIORITY.LOW 定义优先级的类 sqlmap\lib\core\enums.py
LOWEST = -100 LOWER = -50 LOW = -10 NORMAL = 0 HIGH = 10 HIGHER = 50 HIGHEST = 100 插件提示 def dependencies(): singleTimeWarnMessage(f&amp;#34;插件{os.</description>
    </item>
    
    <item>
      <title>xor</title>
      <link>https://main1o.github.io/post/xor/</link>
      <pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://main1o.github.io/post/xor/</guid>
      <description>xorScript Demo
#!/usr/bin/env python # -*- coding: utf-8 -*- import sys import string import urllib def help(): print(&amp;#34;1.数字异或&amp;#34;) print(&amp;#34;2.所有标点集异或&amp;#34;) def XOR_1(): payload = input(&amp;#34;payload:&amp;#34;) strlist = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, \ 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, \ 40, 41, 42, 43, 44, 45, 46, 47, 58, 59, 60, 61, 62, 63, 64, 91, 93, 94, 95, 96, 123, 124, 125, 126, 127] # strlist是ascii表中所有非字母数字的字符十进制 str1,str2 = &amp;#39;&amp;#39;,&amp;#39;&amp;#39; for char in payload: for i in strlist: for j in strlist: if(i ^ j == ord(char)): i = &amp;#39;%{:0&amp;gt;2}&amp;#39;.</description>
    </item>
    
  </channel>
</rss>
